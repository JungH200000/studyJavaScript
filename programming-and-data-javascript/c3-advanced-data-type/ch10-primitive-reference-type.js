/* =====10. 기본형과 참조형===== */

/**
 * JavaScript의 자료형은 크게 '기본형'과 '참조형' 두 가지로 나뉩니다.
 * 이 둘은 변수에 값이 저장되는 방식에서 결정적인 차이를 보입니다.
 */

/**
 * ## 1. 기본형 (Primitive Type)
 *
 * 변수라는 상자에 "값(value) 그 자체"가 저장됩니다.
 * 변수를 복사하면, 같은 모양의 "독립적인 집"이 하나 더 생기는 것과 같다.
 *
 * - 종류: `Number`, `String`, `Boolean`, `Null`, `Undefined`, `Symbol`, `BigInt`
 * - 동작 방식: 변수를 복사하면, 값이 그대로 복사되어 "완전히 독립된 새로운 값"이 만들어집니다.
 */

let x = 3;
let y = x; // x의 '값'인 3이 복사되어 y에 저장됨
console.log(`x = ${x}, y = ${y}`); // x = 3, y = 3

y = 5; // y의 값을 바꿔도 x에는 아무런 영향을 주지 않음
console.log(`x = ${x}, y = ${y}`); // x = 3, y = 5

/**
 * ## 2. 참조형 (Reference Type)
 *
 * 데이터는 메모리의 다른 공간에 저장되고, 변수라는 상자에는 그 데이터가 있는 곳의 "주소(reference)만" 저장됩니다.
 * 변수를 복사하면, "하나의 집을 가리키는 '열쇠'"만 하나 더 복사되는 것과 같다.
 *
 * - 종류: `Object` (배열, 함수 포함)
 * - 동작 방식: 변수를 복사하면, 객체 자체가 아닌 "주소만 복사"됩니다. 결국 두 변수는 "같은 주소"를 가리키게 되어 "하나의 객체를 공유"
 */
let z = { name: '청아' };
let k = z; // z의 '주소'가 복사되어 k에 저장됨 (z와 k는 같은 집을 바라봄)
console.log(z, k); // 모두 { name: '청아' }

k.birth = 1992; // k를 통해 집 내부를 수정
console.log(z, k); // z도 수정되어 있음 { name: '청아', birth: 1992 }

// 기본형과 참조형은 다른 프로그래밍 언어에서도 모두 적용되는 기본적인 개념이니 잘 알아둘 것
