/* =====05. 바보 자바스크립트===== */
/* 부동 소수점 오차 (Floating-Point Issue) */

let sum = 0.1 + 0.2;
console.log(sum); // 0.30000000000000004

/**
 * ## 1. 왜 0.3이 아닐까?
 * '0.1 + 0.2'의 결과가 '0.3'이 아닌 미세하게 큰 값으로 나오는 현상은
 * JavaScript만의 문제가 아닌, 대부분의 프로그래밍 언어에서 공통적으로 발생하는 문제입니다.
 *
 * 그 원인은 컴퓨터가 숫자를 처리하는 방식에 있습니다. 컴퓨터는 모든 데이터를 0과 1로 이루어진
 * '2진수'로 변환하여 계산합니다. 우리가 10진수에서 분수 1/3을 '0.333...'처럼 무한 소수로 표현하듯,
 * 10진수의 소수 중 일부(0.1, 0.2 등)는 2진수로 변환하면 무한 소수가 됩니다.
 *
 * 컴퓨터는 무한한 값을 저장할 수 없으므로, 정해진 메모리 크기에 맞춰 이 무한 소수를
 * 근사치로 잘라서 저장합니다. 이 과정에서 발생하는 아주 작은 차이가 바로 '부동 소수점 오차'입니다.
 */

/**
 * ## 2. 오차 해결 방법
 * 소수점 계산이 포함된 결과는 항상 오차 가능성이 있다고 생각하고,
 * 다음과 같은 방법으로 처리해 주는 것이 안전합니다.
 *
 * ### 1) `toFixed()` 메소드 활용
 * 원하는 소수점 자리에서 반올림하여 문자열로 만든 뒤, 다시 숫자로 변환합니다.
 * 가장 직관적인 방법입니다.
 */
console.log(Number(sum.toFixed(1))); // 0.3
console.log(+sum.toFixed(1)); // 0.3

/**
 * ### 2) 정수로 변환하여 계산 (가장 안전한 방법)
 * 소수를 정수로 만들어 계산한 뒤, 다시 소수로 되돌리는 방법입니다.
 * 계산 과정에서 소수점 오차를 원천적으로 방지할 수 있어 금융 계산 등에서 선호됩니다.
 */
let result = (0.1 * 10 + 0.2 * 10) / 10;
console.log(result); // 0.3
