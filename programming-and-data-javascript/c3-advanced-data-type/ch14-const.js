/* =====14. const, 변수와 상수 사이===== */

/**
 * ## 1. `const`의 진짜 의미: 재할당(Reassignment) 금지
 *
 * `let`과 `const`의 유일한 차이점은 '재할당' 가능 여부입니다.
 * `const`로 선언된 변수는 한 번 값을 할당하면, 다른 값으로 재할당할 수 없습니다.
 */
let x = 1;
x = 4;
console.log(x); // 4

const y = 3;
console.log(y); // 3
// y = 7; // TypeError: Assignment to constant variable

/**
 * ## 2. 왜 `const`를 기본으로 사용할까? (모던 JavaScript의 철학)
 *
 * 작성해주신 내용처럼, 현대 JavaScript에서는 "변수는 기본적으로 `const`로 선언하고,
   재할당이 꼭 필요한 경우에만 `let`을 사용하라"는 것이 표준적인 관행입니다.
 *
 * 그 이유는 코드의 "안정성"과 "예측 가능성"을 높이기 위해서입니다.
 *
 * - 의도 명시: `let`으로 선언된 변수는 "이 변수는 앞으로 바뀔 수 있다"는 신호이고,
               `const`로 선언된 변수는 "이 변수는 절대 재할당되지 않는다"는 신호입니다.
 * - 실수 방지: `const`를 기본으로 사용하면, 의도치 않게 값이 변경되는 실수를 원천적으로 막을 수 있습니다.
 * - 가독성 향상: 코드를 읽는 사람이 변수가 바뀔 가능성을 신경 쓰지 않아도 되므로, 코드의 흐름을 더 쉽게 파악할 수 있습니다.
 */

/**
 * ## 3. '진짜 상수' vs '재할당 금지 변수' 구분하기
 *
 * `const`로 선언하더라도 그 역할에 따라 이름을 짓는 관례(Convention)가 다릅니다.
 *
 * ### 1) 상수 (Constant)
 * 원주율, 최대값처럼 프로그램 전체에서 절대 변하지 않는 고정된 값.
 * "대문자 스네이크 케이스(`SCREAMING_SNAKE_CASE`)"로 작성합니다.
 */
const PI = 3.14;
const MAX_LOGIN_ATTEMPTS = 5;

/**
 * ### 2) 재할당이 금지된 변수
 * 동적으로 값을 할당받지만, 한 번 할당된 후에는 바뀌지 않는 변수.
 * 일반적인 "카멜 케이스(`camelCase`)"로 작성합니다.
 */
const currentUser = getUserFromAPI();
const today = new Date();

/**
 * ## 4. `const`와 참조형
 *
 * `const`는 변수의 "재할당"을 막는 것이지, 변수가 가리키는 객체나 배열의 "내용을 수정"하는 것을 막지는 않습니다.
 * 객체의 property나 배열의 요소를 바꾸는 것은, 변수가 참조하는 '주소'를 바꾸는 행위가 아니기 때문입니다.
 */
const k = { name: '청아' };
k.birth = 1990; // k가 가리키는 객체의 내용을 수정하는 것이므로 가능
